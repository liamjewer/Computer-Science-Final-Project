<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>